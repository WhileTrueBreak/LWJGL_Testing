#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 passTextureCoords;
out vec3 surfaceNormal;
uniform int lightSourceCount;
out vec3 lightVec[16];
out vec3 cameraVec;
out float visibility;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPos[16];

uniform float useFakeLighting;

uniform int numRows;
uniform vec2 offset;

const float density = 0.0035;
const float gradient = 5.0;

void main(void){
	
	vec4 worldPosition = transformationMatrix*vec4(position, 1.0);
	vec4 positionRelativeToCam = viewMatrix*worldPosition;
	gl_Position = projectionMatrix*positionRelativeToCam;
	passTextureCoords = (textureCoords/numRows)+offset;
	
	vec3 actualNormal = normal;
	
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0, 1, 0);
	}
	
	surfaceNormal = (transformationMatrix*vec4(actualNormal, 0)).xyz;
	for(int i = 0;i < lightSourceCount;i++){
		lightVec[i] = lightPos[i]-worldPosition.xyz;
	}
	cameraVec = (inverse(viewMatrix) * vec4(0, 0, 0, 1)).xyz-worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility, 0, 1);
	
}