#version 400 core

in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 lightVec[16];
in vec3 cameraVec;
in float visibility;

out vec4 outColor;

uniform int lightSourceCount;
uniform sampler2D textureSimpler;
uniform vec3 lightColor[16];
uniform vec3 attenuation[16];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){	

	vec4 textureColor = texture(textureSimpler, passTextureCoords);
	if(textureColor.a < 0.5){
		discard;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitCameraVec = normalize(cameraVec);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0;i < lightSourceCount;i++){
		float dist = length(lightVec[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y*dist) + (attenuation[i].z*dist*dist);
		vec3 unitLightVec = normalize(lightVec[i]);
		float dotNL = dot(unitNormal, unitLightVec);
		float brightness = max(dotNL, 0.0f);
		vec3 lightDir = -unitLightVec;
		vec3 reflectedLightDir = reflect(lightDir, unitNormal);
		float specularFactor = dot(reflectedLightDir, unitCameraVec);
		specularFactor = max(specularFactor, 0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse+(brightness*lightColor[i])/attFactor;
		totalSpecular = totalSpecular+(dampedFactor*reflectivity*lightColor[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.2f);
	
	outColor = vec4(totalDiffuse, 1.0)*texture(textureSimpler, passTextureCoords) + vec4(totalSpecular, 1);
	outColor = mix(vec4(skyColor, 1), outColor, visibility);
	
}