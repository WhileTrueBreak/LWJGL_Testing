#version 400 core

in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 lightVec;
in vec3 cameraVec;
in float visibility;

out vec4 outColor;

uniform sampler2D textureSimpler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){	

	vec4 textureColor = texture(textureSimpler, passTextureCoords);
	if(textureColor.a < 0.5){
		discard;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVec = normalize(lightVec);
	vec3 unitCameraVec = normalize(cameraVec);
	
	float dotNL = dot(unitNormal, unitLightVec);
	float brightness = max(dotNL, 0.2f);
	vec3 diffuse = brightness*lightColor;
	
	vec3 lightDir = -unitLightVec;
	vec3 reflectedLightDir = reflect(lightDir, unitNormal);
	
	float specularFactor = dot(reflectedLightDir, unitCameraVec);
	specularFactor = max(specularFactor, 0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular= dampedFactor*reflectivity*lightColor;
	
	outColor = vec4(diffuse, 1.0)*texture(textureSimpler, passTextureCoords) + vec4(finalSpecular, 1);
	outColor = mix(vec4(skyColor, 1), outColor, visibility);
	
}